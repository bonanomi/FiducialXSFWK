import sys, os, string, re, pwd, commands, ast, optparse, shlex, time
from array import array
from math import *
from decimal import *
from binning import binning
from observables import observables

grootargs = []
def callback_rootargs(option, opt, value, parser):
    grootargs.append(opt)

### Define function for parsing options
def parseOptions():

    global opt, args, runAllSteps

    usage = ('usage: %prog [options]\n'
             + '%prog -h for help')
    parser = optparse.OptionParser(usage)

    # input options
    parser.add_option('-d', '--dir',    dest='SOURCEDIR',  type='string',default='./', help='run from the SOURCEDIR as working area, skip if SOURCEDIR is an empty string')
    parser.add_option('',   '--modelName',dest='MODELNAME',type='string',default='SM', help='Name of the Higgs production or spin-parity model, default is "SM", supported: "SM", "ggH", "VBF", "WH", "ZH", "ttH", "exotic","all"')
    parser.add_option('',   '--obsName',dest='OBSNAME',    type='string',default='',   help='Name of the observalbe, supported: "ZZMass", "pT4l", "massZ2", "rapidity4l", "cosThetaStar", "nets_reco_pt30_eta4p7"')
    parser.add_option('',   '--obsBins',dest='OBSBINS',    type='string',default='',   help='Bin boundaries for the diff. measurement separated by "|", e.g. as "|0|50|100|", use the defalut if empty string')
    parser.add_option('-f', '--doFit', action="store_true", dest='DOFIT', default=False, help='doFit, default false')
    parser.add_option('-p', '--doPlots', action="store_true", dest='DOPLOTS', default=False, help='doPlots, default false')
    parser.add_option('', '--nnlops', action="store_true", dest='NNLOPS', default=False, help='ggH NNLOPS')
    parser.add_option('',   '--m4lLower',  dest='LOWER_BOUND',  type='int',default=105.0,   help='Lower bound for m4l')
    parser.add_option('',   '--m4lUpper',  dest='UPPER_BOUND',  type='int',default=140.0,   help='Upper bound for m4l')
    parser.add_option("-l",action="callback",callback=callback_rootargs)
    parser.add_option("-q",action="callback",callback=callback_rootargs)
    parser.add_option("-b",action="callback",callback=callback_rootargs)

    # store options and arguments as global variables
    global opt, args
    (opt, args) = parser.parse_args()

# parse the arguments and options
global opt, args, runAllSteps
parseOptions()
sys.argv = grootargs


from ROOT import *
import ROOT

RooMsgService.instance().setGlobalKillBelow(RooFit.WARNING)

if (opt.DOPLOTS and os.path.isfile('tdrStyle.py')):
    from tdrStyle import setTDRStyle
    setTDRStyle()

Histos = {}
acceptance = {}
qcdUncert = {}
pdfUncert = {}


def getunc(channel, List, m4l_bins, m4l_low, m4l_high, obs_reco, obs_gen, obs_bins, genbin, obs_reco_2nd = 'None', obs_gen_2nd = 'None'):

    # Fixing for rapidity4l because generated by Matteo before spotting the absence of module at gen-level for GENrapidity4l
    if obs_gen == 'GENrapidity4lAbs':
        obs_gen = 'abs(GENrapidity4l)'
    if obs_gen_2nd == 'GENrapidity4lAbs':
        obs_gen_2nd = 'abs(GENrapidity4l)'

    if not doubleDiff:
        obs_gen_low = obs_bins[genbin]
        obs_gen_high = obs_bins[genbin+1]
        obs_gen_lowest = obs_bins[0]
        obs_gen_highest = obs_bins[len(obs_bins)-1]
    else:
        obs_gen_low = obs_bins[genbin][0]
        obs_gen_high = obs_bins[genbin][1]
        obs_gen_lowest = min(x[0] for x in obs_bins.values())
        obs_gen_highest = max(x[1] for x in obs_bins.values())
        #Second variable
        obs_gen_2nd_low = obs_bins[genbin][2]
        obs_gen_2nd_high = obs_bins[genbin][3]
        obs_gen_2nd_lowest = min(x[2] for x in obs_bins.values())
        obs_gen_2nd_highest = max(x[3] for x in obs_bins.values())


    if (obs_reco.startswith("ZZMass")):
        m4l_low = float(obs_gen_low)
        m4l_high = float(obs_gen_high)
        m4l_bins = int((m4l_high-m4l_low)/2)

    i_sample = -1

    print(List)

    for Sample in List:
        if (not Sample in Tree): continue
        if (not Tree[Sample]): continue
        print(Tree[Sample].GetName())
        if (obs_reco.startswith("njets")):
            cutobs_gen = "("+obs_gen+">="+str(obs_gen_low)+")"
        else:
            cutobs_gen = "("+obs_gen+">="+str(obs_gen_low)+" && "+obs_gen+"<"+str(obs_gen_high)+")"
            if doubleDiff:
                cutobs_gen = "("+obs_gen_2nd+">="+str(obs_gen_2nd_low)+" && "+obs_gen_2nd+"<"+str(obs_gen_2nd_high)+")"

        cutm4l_gen     = "(GENmass4l>"+str(m4l_low)+" && GENmass4l<"+str(m4l_high)+")"

        if (channel == "4l"):
            cutchan_gen      = "((abs(GENlep_id[GENlep_Hindex[0]])==11 || abs(GENlep_id[GENlep_Hindex[0]])==13) && (abs(GENlep_id[GENlep_Hindex[2]])==11 || abs(GENlep_id[GENlep_Hindex[2]])==13))"
            cutchan_gen_out  = "((GENZ_DaughtersId[0]==11 || GENZ_DaughtersId[0]==13) && (GENZ_DaughtersId[1]==11 || GENZ_DaughtersId[1]==13))"
            cutm4l_gen       = "(GENmass4l>"+str(m4l_low)+" && GENmass4l<"+str(m4l_high)+")"
            cutm4l_reco      = "(ZZMass>"+str(m4l_low)+" && ZZMass<"+str(m4l_high)+")"
            cutchan_reco     = "(abs(Z1Flav) == 121 || abs(Z1Flav == 169) && (abs(Z2Flav) == 121 || abs(Z2Flav) == 169))"
        if (channel == "4e"):
            cutchan_gen      = "(abs(GENlep_id[GENlep_Hindex[0]])==11 && abs(GENlep_id[GENlep_Hindex[2]])==11)"
            cutchan_gen_out  = "(abs(GENZ_DaughtersId[0])==11 && abs(GENZ_DaughtersId[1])==11)"
            cutm4l_gen       = "(GENmass4l>"+str(m4l_low)+" && GENmass4l<"+str(m4l_high)+")"
            cutm4l_reco      = "(ZZMass>"+str(m4l_low)+" && ZZMass<"+str(m4l_high)+")"
            cutchan_reco     = "(abs(Z1Flav) == 121 && abs(Z2Flav) == 121)"
        if (channel == "4mu"):
            cutchan_gen      = "(abs(GENlep_id[GENlep_Hindex[0]])==13 && abs(GENlep_id[GENlep_Hindex[2]])==13)"
            cutchan_gen_out  = "(GENZ_DaughtersId[0]==13 && GENZ_DaughtersId[1]==13)"
            cutm4l_gen       = "(GENmass4l>"+str(m4l_low)+" && GENmass4l<"+str(m4l_high)+")"
            cutm4l_reco      = "(ZZMass>"+str(m4l_low)+" && ZZMass<"+str(m4l_high)+")"
            cutchan_reco     = "(abs(Z1Flav) == 169 && abs(Z2Flav) == 169)"
        if (channel == "2e2mu"):
            cutchan_gen      = "((abs(GENlep_id[GENlep_Hindex[0]])==11 && abs(GENlep_id[GENlep_Hindex[2]])==13) ||(abs(GENlep_id[GENlep_Hindex[0]])==13 && abs(GENlep_id[GENlep_Hindex[2]])==11))"
            cutchan_gen_out  = "((GENZ_DaughtersId[0]==11 && GENZ_DaughtersId[1]==13) || (GENZ_DaughtersId[0]==13 && GENZ_DaughtersId[1]==11))"
            cutm4l_gen       = "(GENmass4l>"+str(m4l_low)+" && GENmass4l<"+str(m4l_high)+")"
            cutm4l_reco      = "(ZZMass>"+str(m4l_low)+" && ZZMass<"+str(m4l_high)+")"
            cutchan_reco     = "((abs(Z1Flav) == 169 && abs(Z2Flav) == 121) || (abs(Z1Flav) == 121 && abs(Z2Flav) == 169))"

        cuth4l_gen  = "(GENlep_MomMomId[GENlep_Hindex[0]]==25 && GENlep_MomMomId[GENlep_Hindex[1]]==25 && GENlep_MomMomId[GENlep_Hindex[2]]==25 && GENlep_MomMomId[GENlep_Hindex[3]]==25)"
        cuth4l_gen = "1==1"
        cutnoth4l_gen  = "(!"+cuth4l_gen+")"

        shortname = sample_shortnames[Sample]
        processBin = shortname+'_'+channel+'_'+output_name+'_genbin'+str(genbin)

        # GEN level
        Histos[processBin+"fs"] = TH1D(processBin+"fs", processBin+"fs", 100, -1, 10000)
        Histos[processBin+"fs"].Sumw2()

        toCut = "(qcdWeights[0])*(%s)" %cutchan_gen_out
        if 'NNLOPS' in processBin: toCut = "(nnloWeights[0])*(%s)" %cutchan_gen_out

        Tree[Sample].Draw("GENmass4l >> "+processBin+"fs",toCut,"goff")
        #else:
        #    Tree[Sample].Draw("GENmass4l >> "+processBin+"fs","(qcdWeights[0])*("+cutchan_gen_out+")","goff")

        if 'NNLOPS' not in processBin:
            for i in range(0,9):
                if (i==5 or i==7): continue
                Histos[processBin+"fs"+str(i)] = TH1D(processBin+"fs"+str(i), processBin+"fs"+str(i), 100, -1, 10000)
                Histos[processBin+"fs"+str(i)].Sumw2()

                #toCut = "(qcdWeights[i])*(cutchan_gen_out)"
                toCut = "(qcdWeights[0])*(%s)" %cutchan_gen_out
                Tree[Sample].Draw("GENmass4l >> "+processBin+"fs"+str(i),toCut,"goff")

                Histos[processBin+"fid"+str(i)] = TH1D(processBin+"fid"+str(i), processBin+"fid"+str(i), m4l_bins, m4l_low, m4l_high)
                Histos[processBin+"fid"+str(i)].Sumw2()

                toCut = "(qcdWeights["+str(i)+"])*(passedFiducialSelection_bbf==1 && "+cutm4l_gen+" && "+cutobs_gen+" && "+cutchan_gen+"  && "+cuth4l_gen+")"

                Tree[Sample].Draw("GENmass4l >> "+processBin+"fid"+str(i),toCut,"goff")
                Histos[processBin+"fid"+str(i)].Scale(1.0/Histos[processBin+"fs"].Integral())

                Histos[processBin+"fs"+str(i)].Scale(1.0/Histos[processBin+"fs"+str(i)].Integral())
        else:
            for i in range(0,27):
                if (i==5 or i==7 or i==11 or i==14 or i==15 or i==16 or i==17 or i==19 or i==21 or i==22 or i==23 or i==25): continue
                Histos[processBin+"fs"+str(i)] = TH1D(processBin+"fs"+str(i), processBin+"fs"+str(i), 100, -1, 10000)
                Histos[processBin+"fs"+str(i)].Sumw2()

                #toCut = "(nnloWeights[i])*(cutchan_gen_out)"
                toCut = "(nnloWeights[0])*(%s)" %cutchan_gen_out
                Tree[Sample].Draw("GENmass4l >> "+processBin+"fs"+str(i),toCut,"goff")

                Histos[processBin+"fid"+str(i)] = TH1D(processBin+"fid"+str(i), processBin+"fid"+str(i), m4l_bins, m4l_low, m4l_high)
                Histos[processBin+"fid"+str(i)].Sumw2()

                toCut = "(nnloWeights["+str(i)+"])*(passedFiducialSelection_bbf==1 && "+cutm4l_gen+" && "+cutobs_gen+" && "+cutchan_gen+"  && "+cuth4l_gen+")"

                Tree[Sample].Draw("GENmass4l >> "+processBin+"fid"+str(i),toCut,"goff")
                Histos[processBin+"fid"+str(i)].Scale(1.0/Histos[processBin+"fs"].Integral())

                Histos[processBin+"fs"+str(i)].Scale(1.0/Histos[processBin+"fs"+str(i)].Integral())

        Histos[processBin+"fidPDF"] = TH1D(processBin+"fidPDF", processBin+"fidPDF", m4l_bins, m4l_low, m4l_high)
        Histos[processBin+"fidPDF"].Sumw2()
        if ("NNLOPS" in processBin):
            Tree[Sample].Draw("GENmass4l >> "+processBin+"fidPDF","(nnloWeights[0]*pdfENVup/abs(qcdWeights[0]))*(passedFiducialSelection_bbf==1 && "+cutm4l_gen+" && "+cutobs_gen+" && "+cutchan_gen+"  && "+cuth4l_gen+")","goff")
        else:
            Tree[Sample].Draw("GENmass4l >> "+processBin+"fidPDF","(qcdWeights[0]*pdfENVup/abs(qcdWeights[0]))*(passedFiducialSelection_bbf==1 && "+cutm4l_gen+" && "+cutobs_gen+" && "+cutchan_gen+"  && "+cuth4l_gen+")","goff")
        Histos[processBin+"fidPDF"].Scale(1.0/Histos[processBin+"fs"].Integral())

        fsintegral = Histos[processBin+"fs"].Integral()
        Histos[processBin+"fs"].Scale(1.0/Histos[processBin+"fs"].Integral())

        # GEN level
        accerrstat=0.0
        if (Histos[processBin+"fs"].Integral()>0):
            if ("NNLOPS" in processBin):
                print(Histos[processBin+"fs"].Integral(),Histos[processBin+"fid0"].Integral())

                qcderrup=1.0; qcderrdn=1.0;
                accerrup=1.0; accerrdn=1.0;

                print(processBin+'fid0', Histos[processBin+"fid0"].Integral())

                #for i in range(9,36):
                for i in range(0,27):
                    if (i==5 or i==7 or i==11 or i==14 or i==15 or i==16 or i==17 or i==19 or i==21 or i==22 or i==23 or i==25): continue
                    ratio = Histos[processBin+"fid"+str(i)].Integral()/Histos[processBin+"fid0"].Integral()
                    print(i,'ratio',ratio)
                    if abs(ratio)>1.4: print('---------- ALERT !!!! ------- Uncertainty larger than 0.30 for weight = ', i)
                    if abs(ratio)>1.: continue
                    if (ratio>qcderrup): qcderrup = ratio#Histos[processBin+"fid"+str(i)].Integral()/Histos[processBin+"fid0"].Integral()
                    if (ratio<qcderrdn): qcderrdn = ratio#Histos[processBin+"fid"+str(i)].Integral()/Histos[processBin+"fid0"].Integral()

            else:
                print(Histos[processBin+"fs"].Integral(),Histos[processBin+"fid0"].Integral())
                qcderrup=1.0; qcderrdn=1.0;
                accerrup=1.0; accerrdn=1.0;
                for i in [1,2,3,4,6,8]:
                    ratio = Histos[processBin+"fid"+str(i)].Integral()/Histos[processBin+"fid0"].Integral()
                    print(i,'ratio',ratio)
                    if (ratio>qcderrup): qcderrup = Histos[processBin+"fid"+str(i)].Integral()/Histos[processBin+"fid0"].Integral()
                    if (ratio<qcderrdn): qcderrdn = Histos[processBin+"fid"+str(i)].Integral()/Histos[processBin+"fid0"].Integral()
            if(abs(qcderrdn-1)>1. and abs(qcderrup-1)<1.): qcderrdn = qcderrup
            if(abs(qcderrdn-1)<1. and abs(qcderrup-1)>1.): qcderrup = qcderrdn
            qcderrdn = qcderrup
            qcdUncert[processBin] = {"uncerDn":abs(qcderrdn-1.0),"uncerUp":abs(qcderrup-1.0)}
            pdferr_up = Histos[processBin+"fidPDF"].Integral()/Histos[processBin+"fid0"].Integral()
            pdferr_dn = Histos[processBin+"fidPDF"].Integral()/Histos[processBin+"fid0"].Integral()
            pdfUncert[processBin] = {"uncerDn":abs(pdferr_dn-1.0),"uncerUp":abs(pdferr_up-1.0)}

            print(processBin,qcderrup,qcderrdn,pdferr_up,pdferr_dn)

m4l_bins = 35
m4l_low = opt.LOWER_BOUND
m4l_high = opt.UPPER_BOUND

obs_bins, doubleDiff = binning(opt.OBSNAME)
if doubleDiff:
    obs_name = opt.OBSNAME.split(' vs ')[0]
    obs_name_2nd_out = opt.OBSNAME.split(' vs ')[1]
    obs_name_2d = opt.OBSNAME
else:
    obs_name = opt.OBSNAME

output_name = obs_name
if doubleDiff: output_name += '_'+obs_name_2nd_out
print output_name

_temp = __import__('observables', globals(), locals(), ['observables'], -1)
observables = _temp.observables
print(observables)
if doubleDiff:
    obs_reco = observables[obs_name_2d]['obs_reco']
    obs_reco_2nd = observables[obs_name_2d]['obs_reco_2nd']
    obs_gen = observables[obs_name_2d]['obs_gen']
    obs_gen_2nd = observables[obs_name_2d]['obs_gen_2nd']
else:
    obs_reco = observables[obs_name]['obs_reco']
    obs_gen = observables[obs_name]['obs_gen']

Tree = {}
sample_shortnames = {}
if opt.NNLOPS:
    List = ["ggH125_NNLOPS"]
    root_file = ROOT.TFile("/grid_mnt/data__data.polcms/cms/tarabini/HZZ4l/MC_samples/2016_MELA/ggH125_NNLOPS/ggH125_NNLOPS_reducedTree_MC_2016.root", "READ")
    Tree["ggH125_NNLOPS"] = root_file.Get("candTree")
    sample_shortnames["ggH125_NNLOPS"] = "ggH125_NNLOPS"
else:
    List = ["ggH125"]
    root_file = ROOT.TFile("/grid_mnt/data__data.polcms/cms/tarabini/HZZ4l/MC_samples/2016_MELA/ggH125/ggH125_unc_reducedTree_MC_2016.root", "READ")
    Tree["ggH125"] = root_file.Get("candTree")
    sample_shortnames["ggH125"] = "ggH125"

if (obs_reco=="ZZMass"):
    chans = ['4e','4mu','2e2mu', '4l']
else:
    chans = ['4e','4mu','2e2mu', '4l']

nBins = len(obs_bins)
if not doubleDiff: nBins = nBins - 1
for chan in chans:
    for genbin in range(nBins):
        if doubleDiff:
            getunc(chan, List, m4l_bins, m4l_low, m4l_high, obs_reco, obs_gen, obs_bins, genbin, obs_reco_2nd, obs_gen_2nd)
        else:
            getunc(chan, List, m4l_bins, m4l_low, m4l_high, obs_reco, obs_gen, obs_bins, genbin)

# if (obs_reco.startswith("njets")):
#     for chan in chans:
#         for genbin in range(len(obs_bins)-2): # last bin is >=3
#             for Sample in List:
#                 shortname = sample_shortnames[Sample]
#                 processBin = shortname+'_'+chan+'_'+obs_reco+'_genbin'+str(genbin)
#                 processBinPlus1 = shortname+'_'+chan+'_'+obs_reco+'_genbin'+str(genbin+1)
#                 acceptance[processBin] = acceptance[processBin]-acceptance[processBinPlus1]
#                 qcdUncert[processBin]['uncerUp'] = sqrt(qcdUncert[processBin]['uncerUp']*qcdUncert[processBin]['uncerUp']+qcdUncert[processBinPlus1]['uncerUp']*qcdUncert[processBinPlus1]['uncerUp'])
#                 qcdUncert[processBin]['uncerDn'] = sqrt(qcdUncert[processBin]['uncerDn']*qcdUncert[processBin]['uncerDn']+qcdUncert[processBinPlus1]['uncerDn']*qcdUncert[processBinPlus1]['uncerDn'])

if opt.NNLOPS:
    nnlops = "_NNLOPS"
else:
    nnlops = ""

with open('../inputs/accUnc_'+output_name+nnlops+'.py', 'w') as f:
    #f.write('acc = '+str(acceptance)+' \n')
    f.write('qcdUncert = '+str(qcdUncert)+' \n')
    f.write('pdfUncert = '+str(pdfUncert)+' \n')
